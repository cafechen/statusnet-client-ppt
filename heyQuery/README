heyQuery is a light wrapper around jQuery's Sizzle selector engine, meant to provide
just enough capability to do the XML extraction we use in our JS-based code for the
StatusNet client.

Stock jQuery 1.4.2 doesn't work in Titanium Mobile 1.3 due to a combination of bugs
in Titanium's Ti.XML implementation, legitimately missing functionality that's not
firmly specced but that jQuery/Sizzle expect, and other assumptions made about the
environment that don't hold (such as type checks based on the output of toString()).

Not everything is working yet; the biggest remaining hurdle I've found is that object
identity is not preserved for the proxied DOM node objects; this makes it impossible
to test whether two variables refer to the same node, breaking many test cases including
descendent and adjacent selectors.


Sizzle is from: http://sizzlejs.com/ and has all that copyright stuff. Enjoy!




Ti.XML DOM implementation problems...
* some method entries are present, but don't work as expected -- this can mess up feature detection.
* getElementById is present, but doesn't work on iPhone
	a) XPath expression doesn't quote its string, so fails.
	b) also, it tries to return a node list instead of a single node!
* getElementsByTagName('*') doesn't work on iPhone
* getElementsByName is not present (but, technically, possibly shouldn't for xml)
* documentElement is exposed as a function instead of a property on iPhone
* object identity is not preserved on DOM node proxy objects -- can't compare variables to see if they hold the same element! this is hugely problematic, and is my main remaining bottleneck
* node lists can't be accessed directly by index nodes[i] -- have to use nodes.item(i) which isn't source compatible
* elements have 'text' property where we expected 'textContent'
* evaluate() returns a DOM node list, where we would have expected an XPathResult (honestly i like the node list better, but it's a compatibility issue as they're totally different interfaces)
* i think i've seen problems with objects not updating when we make changes via the dom. this is not an issue for our use cases, but it's worrying. need to investigate.

Bad assumptions in sizzle:
* window and document exist...
* object.prototype.toString(foo) will give consistent results like "[object Array]" -- they can differ significantly, which affects some type checks
